OnTranslate
{
	_talk = reference0
	
	//This is what makes %(embedded_elements) work in script input
	if reference1 == "" && reference2 == "" //If this is from the input box
	{ //send input box : no event (ref2) , no special flag (ref1)
		_talk = EVAL('"' + REPLACE(_talk,'"','""') + '"')
	}
	
	//If you want to add anything to OnTranslate, like text replacement, I would put it after this point, generally. Just make sure it's before the TOSTR(_talk)
	
	TOSTR(_talk)
}

//This is just here so you can use anchors to link to websites if you want. You can link to websites with normal menu choice tags! If you do, a handy URL preview will show up in the balloon!
OnAnchorSelect
{
	if "http://" _in_ reference0 || "https://" _in_ reference0; "\j[""%(reference0)""]"
}

//Hotkeys
OnKeyPress
{
	if reference0 == "f1"; "\![open,readme]"
	elseif gamestate == 0
	{	
		if reference0 == "up" || reference0 == "left" || reference0 == "right" || reference0 == "down"
		{"\![OnMove,%(reference0)]"}
	}
	
}

//Happens about 30 seconds after a script ends, by default, to bring them back to normal poses
OnSurfaceRestore
{
	"\1\s[10]\0\s[0]"
}

//Happens when the ghost is unminimized. You *can* include dialogue, but you don't *have* to. I have included this event because if you don't, it defaults to \0\s[0]\1\s[10], which you don't want in some cases, such as if your ghost uses different surfaces or has a different number of characters.
OnWindowStateRestore
{
	"\1\s[10]\0\s[0]"
}

s.init
{
	//to align the invisible screens to set up balloons
	"\![reset,sticky-window]\![set,sticky-window,0,1]"
	//--
	//if SHIORI3FW.BalloonName == "Closed Solar Captions"
	//{"\0\![set,balloonoffset,@-250,0]"
	//--
	//"\1\s[-1]\![move,--X=0,--Y=0,--base=0,--option=ignore-sticky-window]"
	//--
	//"\![set,balloonoffset,-250,-340]"}
	
	case gamestate
	{
		when 1; "\0\s[0]" //dream archive
		when 2; "\0\s[0]" //nightmare study
		when 3; "\0\s[0]" //journal
		when 4; "\0\s[0]" //puzzle
		others; "\0\s[0]" //normal gameplay
	}

	//copied over from celeste!
}

//Network update url. Make sure you have a / on the end of the url or it will give a warning every time users try to update! If you don't plan to use network updates you can remove this
//IF YOU'RE USING GITHUB FOR NETWORK UPDATES: DO NOT USE github.io URLS! It will cause you pain and suffering. USE raw.githubusercontent!!!
//To get the raw.githubusercontent link super easy:
//• Open your ghost's repo online
//• navigate to the ghost's folder (the top level one, with install.txt, readme.txt, etc)
//• Click on install.txt, or another text file on that level
//• Once on that page, click the "raw" button. You should see the url now starts with raw.githubusercontent
//• Copy that url exactly as is, but *leave off the "install.txt" or whatever file name at the end.*
//Tada! That's your url! Make sure you test it! The dev palette and script/network log can help with that
On_homeurl
{
	"https://raw.githubusercontent.com/WhatAPhantasia/Dreamcatchergaka/master/da_whereareyoudreamcatcher/"
}


//—————————————————————————————— Right click menu links ——————————————————————————————

//Takes an array of alternating names and urls, and formats them for use with the right click menu
FormatLinks : all
{
	for _i = 0; _i < ARRAYSIZE(_argv); _i++
	{
		_argv[_i] //Add the link/title
		//Alternate between adding %ASC(1) or %ASC(2)
		if _i % 2 == 1; "%ASC(2)"
		else; "%ASC(1)"
	}
}

On_sakura.recommendsites
{
	FormatLinks(recommendsites_sakura)
}

//These are the websites linked in the top option of the sakura's right click menu. The format is simple; write the label of the link on the left followed by a semicolon, and then on the right, the url to link to. These should be separate strings.
recommendsites_sakura : array
{
	"Nightmare's Toyhou.se Page";	"https://toyhou.se/20808237.nightmare"
}

On_sakura.portalsites 
{
	FormatLinks(portalsites_sakura)
}

//These are the websites linked in the second option of the sakura's right click menu. Same as above
portalsites_sakura : array
{
	"Download Page"; "https://whataphantasia.github.io/projects/ukagaka/ghosts/da-where-are-you-dreamcatcher"
	"Changelog (G. Docs)"; "https://docs.google.com/document/d/10yy69A5hkizTPMh1mmRISIDg8M3JMfOdL9abrYmme20/edit?usp=sharing"
	"Phantasia's Website"; "https://whataphantasia.github.io/"
	""; ""
	"Simplicity v1.0.8"; "https://github.com/Zichqec/simplicity_template"
	"Ukagaka Dream Team Wiki"; "https://ukagakadreamteam.com/wiki/"
}

On_kero.recommendsites
{
	FormatLinks(recommendsites_kero)
}

//These are the websites linked in the first option of the kero's right click menu. Same as above
recommendsites_kero : array
{
	"Dreamcatcher Archives Toyhou.se Folder";	"https://toyhou.se/WhatAPhantasia/characters/folder:3533735"
}

//to match up with what user put in ssp prefs.
username
{
	SHIORI3FW.UserName
}

//-----other functions.
IsAkari
{
	if user == "akari" || user == "kuromiya" || user == "ia"; 1
	else; 0
}

//basically the name cleaning function in OnTitle and OnName. returns the cleaned term!!
CleanTerm
{	
	_term = _argv[0] //putting the raw input into _term to do some tests on it
	_term = TOLOWER(_term) //changes it to lowercase
	_term = REPLACE(_term," ","") //removes spaces
	_term = REPLACE(_term,".","") //removes periods
	_term = REPLACE(_term,"-","") //removes dashes
	_term
}

//Written by Zichqec https://ukagaka.zichqec.com/

//Usage: This is intended to take the place of single-use variables that only contain 0 or 1, used as flags for certain events and such. With these functions, you can store all those flags as a single array, meaning you can make as many flags as you want without having to really worry about save bloat. It can also make your code a bit more readable!

//You'll want to put 'MiscFlags = IARRAY' into your OnFirstBoot. That'll set up an empty array for flags to be stored in.
//When you want to check if a flag is set or not, you can do it like so:
//if Flag("My Flag") == 0
//or
//if Flag("My Flag") == 1

//Any flags that are NOT in the array are 0, and any flags that ARE in the array are 1. So, to set a flag to 1, you add it to the array like this:
//if Flag("My Flag") == 0; MiscFlags ,= "My Flag"

//You don't technically need the if check there, but it stops duplicate entries from being added. The ,= is also important; that adds a new element to an array. Don't use += for this!

//If you want to set a flag back to 0, you can remove it like so:
//RemoveFlag("My Flag")

//Flag names can be just about anything you want! They're just stored as strings. For example, for S I have "Saw Gaster with googly eyes", and for Lulo I have things like "Unlocked MP3 player" and "Unlocked journal". If you want to see what flags are set, you can just put %(MiscFlags) into script input, so it's helpful to have names that describe the flag!

Flag //Checks to see if a flag exists. Returns 1 if yes, returns 0 if no
{
	if ASEARCH(_argv[0],MiscFlags) != -1; 1
	else; 0
}

RemoveFlag //Removes all instances of a flag in the array.
{
	_elements = ASEARCHEX(_argv[0],MiscFlags)
	if ARRAYSIZE(_elements) > 0
	{
		for _i = ARRAYSIZE(_elements) - 1; _i >= 0; _i-- //Goes from the end of the list to the start, so the elements stay in the same positions while we erase
		{
			_current = _elements[_i]
			MiscFlags[_current] = IARRAY
		}
	}
}

UnlockFlag //Same but for UnlockFlags.
{
	if ASEARCH(_argv[0],UnlockFlags) != -1; 1
	else; 0
}

RemoveUnlockFlag //Removes all instances of a flag in the array.
{
	_elements = ASEARCHEX(_argv[0],UnlockFlags)
	if ARRAYSIZE(_elements) > 0
	{
		for _i = ARRAYSIZE(_elements) - 1; _i >= 0; _i-- //Goes from the end of the list to the start, so the elements stay in the same positions while we erase
		{
			_current = _elements[_i]
			UnlockFlags[_current] = IARRAY
		}
	}
}

//Technical details:

//ASEARCH is a YAYA command that searches an array for the value you specify. If it doesn't find the value, it returns -1. If it finds the value, it returns the position in the array.

//ASEARCHEX is similar, but it finds all instances of the same value, and returns the positions as a new array.

//So, it IS possible to skip a step here and write if ASEARCH("My Flag",MiscFlags) != -1, to see if a flag is set. But != -1 is a bit confusing at times! So the Flag function here returns 1 if the flag is set, and 0 if it is not, to simplify things.

//With the RemoveFlag function, all it does is see how many instances of the value there are, then start erasing them from the end of the array working towards the start of the array, so that the array positions don't change as it erases. The reason I've done it this way is so that if someone accidentally adds the same flag to the array a bunch of times, all of them will be erased, so that the flag returns 0.